---
title: "bikeshare prediction"
author: "Raphael Balzer"
date: "2023-08-16"
image: "bike.png"
categories:
  - EDA
  - Regression
  - tidymodels
---


# Vorhersagemodellierung zu Fahrradausleihungen

Im Folgenden sollen Fahrradausleihungen vorhergesagt werden. Gegenstand der Analysen ist ein Datensatz, der unter anderem Wetterdaten, Auskunft über das Datum und die Uhrzeit und die Anzahl der täglich geliehenen Fahrräder zu jeder Stunde enthält. Zunächst soll ein Überblick über den Datensatz und die Wechselwirkungen der Variablen untereinander verschafft werden. Im zweiten Teil werden Modelle mit einigen Vorverarbeitungsschritten trainiert, um dann im letzten Schritt die Vorhersagedatei zu erstellen. Als Framework für die Modellierung wird Tidymodels verwendet.

## Vorbereitung

### Pakete laden


```{r}
library(ggcorrplot)
library(easystats)
library(tidymodels)
library(tidyverse)
library(corrr)
library(tidytext)
library(ggthemes)
library(ggplot2)
library(GGally)
library(lubridate)
library(xgboost)
library(Cubist)
library(rules)
library(caret)
library(vip)
```


### Dateninmport


```{r}
library(readr)
bikeshare_test <- read_csv("bikeshare_test.csv")
```

```{r}
library(readr)
bikeshare_train <- read_csv("bikeshare_train.csv")
bikeshare_train
```


## Explorative Datenanalyse

### Korrelationen


```{r}
bikeshare_train %>% 
  ggcorr(label = TRUE)
```


### Prüfung auf fehlende Werte


```{r}
bikeshare_train %>% 
  summarise((across(everything(),~sum(is.na(.x)))))
```

```{r}
bikeshare_test %>%
  summarise((across(everything(),~sum(is.na(.x)))))
```

```{r}
visdat::vis_dat(bikeshare_train)
```


### Boxplots


```{r}
bikeshare_train %>% 
  select(where(is.numeric)) %>% 
  pivot_longer(everything()) %>% 
ggplot(., aes(x = value)) +
  geom_boxplot(fill = "#4E79A7") +
  theme_minimal() +
  facet_wrap(~ name, scales = "free_x")
```

```{r}
bikeshare_test %>% 
  select(where(is.numeric)) %>% 
  pivot_longer(everything()) %>% 
ggplot(., aes(x = value)) +
  geom_boxplot(fill = "#4E79A7") +
  theme_minimal() +
  facet_wrap(~ name, scales = "free_x")
```


### Histogramme


```{r}
bikeshare_train %>% 
  select(where(is.numeric)) %>% 
  pivot_longer(everything()) %>% 
ggplot(., aes(x = value)) +
  geom_histogram(fill = "#4E79A7") +
  theme_minimal() +
  facet_wrap(~ name, scales = "free_x")
```

```{r}
bikeshare_test %>% 
  select(where(is.numeric)) %>% 
  pivot_longer(everything()) %>%  
ggplot(., aes(x = value)) +
  geom_histogram(fill = "#4E79A7") +
  theme_minimal() +
  facet_wrap(~ name, scales = "free_x")
```


### Diagramme mit Faktorvariablen


```{r}
bikeshare_train %>%
  pivot_longer(cols = 2:11) %>%  
  ggplot(., aes(x = value, fill = season)) +
  geom_boxplot() +
  facet_wrap(~ name, scales = "free_x") +
  scale_fill_tableau() +
  theme_minimal()
```

```{r}
bikeshare_train %>%
  pivot_longer(cols = 2:11) %>%  
  ggplot(., aes(x = value, fill = holiday)) +
  geom_boxplot() +
  facet_wrap(~ name, scales = "free_x") +
  scale_fill_tableau() +
  theme_minimal()
```

```{r}
bikeshare_train %>%
  pivot_longer(cols = 2:11) %>%  
  ggplot(., aes(x = value, fill = func)) +
  geom_boxplot() +
  facet_wrap(~ name, scales = "free_x") +
  scale_fill_tableau() +
  theme_minimal()
```

```{r}
bikeshare_train %>% 
  ggplot(aes(x = season, fill = holiday)) +
  geom_bar(alpha = 0.8) +
  coord_flip() +
  scale_fill_tableau() +
  theme_minimal()
```

```{r}
bikeshare_train %>% 
  ggplot(aes(x = season, fill = func)) +
  geom_bar(alpha = 0.8) +
  coord_flip() +
  scale_fill_tableau() +
  theme_minimal()
```

```{r}
bikeshare_train %>% 
  mutate(hour = factor(hour)) %>% 
  ggplot()+
  aes(hour, count, fill = hour) +
  geom_boxplot(show.legend = FALSE, alpha = 0.8) +
  scale_fill_viridis_d() +
  theme_minimal()
```

```{r}
bikeshare_train %>%  
  ggplot()+
  aes(hour, count) +
  geom_smooth(color = "#4E79A7", linewidth = 2 ) +
  theme_minimal()
```

```{r}
bikeshare_train %>%  
  ggplot()+
  aes(hour, temp) +
  geom_smooth(color = "#4E79A7", linewidth = 2 ) +
  theme_minimal()
```

```{r}
bikeshare_train %>%  
  ggplot()+
  aes(hour, humidity) +
  geom_smooth(color = "#4E79A7", linewidth = 2 ) +
  theme_minimal()
```

```{r}
bikeshare_train %>%  
  ggplot()+
  aes(hour, windspeed) +
  geom_smooth(color = "#4E79A7", linewidth = 2 ) +
  theme_minimal()
```

```{r}
bikeshare_train %>%  
  ggplot()+
  aes(hour, visibility) +
  geom_smooth(color = "#4E79A7", linewidth = 2 ) +
  theme_minimal()
```


### Zentrale Befunde

Es gibt keine fehlenden Werte, Extremwerte sind auch äußerst rar. Durch die explorativen Datenanalyse ist deutlich zu erkennen, dass die Ausleihungen nach Jahres- und Uhrzeit stark variieren. Außerdem sind die Ausleihungen an Arbeitstagen höher. Bei nicht funktionalen Tagen finden keine Ausleihungen statt. Diese Beobachtung gilt es für die Vorhersagen im Hinterkopf zu behalten. Außerdem haben die Wettervariablen ihre Hoch- oder Tiefpunkte zu ungefähr derselben Uhrzeit, zu der auch am meisten Fahrräder geliehen werden.

## Modellierung

### Aufteilung in Train- und Test-Sample


```{r}
set.seed(42)

train_test_split <- initial_split(bikeshare_train, prop = 0.7497717)
bikeshare_train1 <- training(train_test_split)
bikeshare_test1 <- testing(train_test_split)
```


### Rezepte

Das Hauptaugenmerk bei den Rezepten liegt auf der Datumsspalte und den Interaktionen. Nach der Umwandlung in ein Datumsformat können mit step_date() einige interessante Features extrahiert werden. Außerdem gibt es einige interessante Interaktionseffekte. Die folgenden zwei Rezepte liefern die besten Vorhersagen und unterscheiden sich nur hinsichtlich der Normalisierung der Prädiktoren:


```{r}
rec72 <- 
  recipe(count ~., data = bikeshare_train1) %>%
  step_mutate(date = lubridate::dmy(date)) %>%
  step_date(date,  features = c("dow", "doy", "week"), keep_original_cols = FALSE) %>%
  step_mutate(date_dow = as.numeric(date_dow),
              date_week = as.numeric(date_week)) %>%
  step_normalize(all_numeric_predictors(), -c(hour, date_doy, date_dow, date_week)) %>%
  step_dummy(all_nominal_predictors()) %>% 
  step_interact(terms = ~starts_with("holiday"):hour, role = "predictor") %>% 
  step_interact(terms = ~starts_with("holiday"):humidity, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):rain, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):date_dow, role = "predictor") %>% 
  step_interact(terms = ~starts_with("func"):temp, role = "predictor") 
```

```{r}
rec81 <- 
  recipe(count ~., data = bikeshare_train1) %>%
  step_mutate(date = lubridate::dmy(date)) %>%
  step_date(date,  features = c("dow", "doy", "week"), keep_original_cols = FALSE) %>%
  step_mutate(date_dow = as.numeric(date_dow),
              date_week = as.numeric(date_week)) %>%
  step_dummy(all_nominal_predictors())%>% 
  step_interact(terms = ~starts_with("holiday"):hour, role = "predictor") %>% 
  step_interact(terms = ~starts_with("holiday"):humidity, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):rain, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):date_dow, role = "predictor") %>% 
  step_interact(terms = ~starts_with("func"):temp, role = "predictor")
```


## Modelle

Es werden zwei starke Modelle berechnet, ein XGboost und ein Cubist. Die Wahl der Modellarten basiert hauptsächlich auf persönlichen Präferenzen. Es wird außerdem fünffache Kreuzvalidierung mit drei Wiederholungen verwendet.


```{r}
cv_scheme <- vfold_cv(bikeshare_train1,
  v = 5, 
  repeats = 3)
```

```{r}
doParallel::registerDoParallel()
```

```{r}
mod_tree <-
  decision_tree(cost_complexity = tune(),
                tree_depth = tune(),
                min_n = tune(),
                mode = "regression")
```

```{r}
mod_xg <- boost_tree(
  mtry = tune(), 
  trees = tune(), 
  tree_depth = tune(), 
  learn_rate = tune(), 
  min_n = tune(), 
  loss_reduction = tune()) %>%
  set_engine("xgboost", nthreads = 4) %>%
  set_mode("regression")
```

```{r}
mod_cubist <- cubist_rules(
  committees = tune(),
  neighbors = tune(),
  max_rules = tune()) %>%
  set_engine("Cubist", nthreads = 4) %>%
  set_mode("regression")
```

```{r}
preproc <- list(rec81 = rec81, rec72 = rec72)

models <- list(cubist = mod_cubist, xgboost = mod_xg)

all_workflows <- workflow_set(preproc, models)

model_set <-
all_workflows %>% 
workflow_map(
  resamples = cv_scheme,
  grid = 10,
  seed = 42,
  verbose = TRUE)
```


## Ergebnisse


```{r}
tune::autoplot(model_set) +
  theme(legend.position = "bottom")
```

```{r}
model_set %>% 
  collect_metrics() %>% 
  arrange(-mean)
```

```{r}
best_model_params <- 
  extract_workflow_set_result(model_set, "rec81_cubist") %>% 
  select_best()

best_wf <- 
all_workflows %>% 
  extract_workflow("rec81_cubist")

best_wf_finalized <- 
  best_wf %>% 
  finalize_workflow(best_model_params)

fit_final <-
  best_wf_finalized %>% 
  last_fit(train_test_split)

collect_metrics(fit_final)
```

```{r}
fit_final %>% 
  extract_fit_parsnip() %>% 
  vip() 
```


## Trainieren und Fitten des Modells auf den ursprünglichen Trainingsdaten


```{r}
recfinal <- 
  recipe(count ~., data = bikeshare_train) %>%
  step_mutate(date = lubridate::dmy(date)) %>%
  step_date(date,  features = c("dow", "doy", "week"), keep_original_cols = FALSE) %>%
  step_mutate(date_dow = as.numeric(date_dow),
              date_week = as.numeric(date_week)) %>%
  step_dummy(all_nominal_predictors())%>% 
  step_interact(terms = ~starts_with("holiday"):hour, role = "predictor") %>% 
  step_interact(terms = ~starts_with("holiday"):humidity, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):rain, role = "predictor") %>%
  step_interact(terms = ~starts_with("holiday"):date_dow, role = "predictor") %>% 
  step_interact(terms = ~starts_with("func"):temp, role = "predictor")
```

```{r}
cv_scheme2 <- vfold_cv(bikeshare_train,
  v = 5, 
  repeats = 3)
```

```{r}
preproc2 <- list(rec81 = recfinal)

models2 <- list(cubist = mod_cubist, xgboost = mod_xg)

all_workflows2 <- workflow_set(preproc2, models2)

model_set2 <-
all_workflows2 %>% 
workflow_map(
  resamples = cv_scheme2,
  grid = 10,
  seed = 42,
  verbose = TRUE)
```

```{r}
tune::autoplot(model_set2) +
  theme(legend.position = "bottom")
```

```{r}
model_set2 %>% 
  collect_metrics() %>% 
  arrange(-mean)
```

```{r}
best_model_params2 <- 
  extract_workflow_set_result(model_set2, "rec81_cubist") %>% 
  select_best()

best_wf2 <- 
all_workflows2 %>% 
  extract_workflow("rec81_cubist")

best_wf_finalized2 <- 
  best_wf2 %>% 
  finalize_workflow(best_model_params2)

fit_final2 <-
  best_wf_finalized2 %>% 
  fit(bikeshare_train)
```


## Vorhersage auf das Test-Sample

Bei der Vorhersage ist zu beachten, dass es im Train-Sample keine Ausleihungen an funktionalen Tagen gab. Es ist eine vernünftige Annahme, dass dies im Test-Sample wahrscheinlich genauso sein wird. Daher werden manuell alle Vorhersagen für nicht funktionale Tage auf null gesetzt.


```{r}
final_preds <- 
  fit_final2 %>% 
  predict(new_data = bikeshare_test) %>% 
  bind_cols(bikeshare_test)

submission_df <-
  final_preds %>%
  mutate(id = row_number()) %>%
  mutate(pred = case_when(func == "No" ~ 0,
                            TRUE ~ .pred)) %>% 
  select(id, pred)
```

```{r}
submission_df %>% 
  ggplot() +
  aes(pred) +
  geom_histogram()
```

```{r}
write.csv(submission_df, file = "Balzer_Raphael_00163021_Prognose.csv", row.names = FALSE)
```

