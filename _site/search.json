[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Dieser persönliche Blog dient als Sammlung für sämtliche Data-Science Projekte in Zusammenhang mit dem Studium und Selbststudium."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Miniprojekt DS\n\n\n\n\n\n\n\nText-Analyse\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2023\n\n\nRaphael Balzer\n\n\n\n\n\n\n  \n\n\n\n\nbikeshare prediction\n\n\n\n\n\n\n\nEDA\n\n\nRegression\n\n\ntidymodels\n\n\n\n\n\n\n\n\n\n\n\nAug 16, 2023\n\n\nRaphael Balzer\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html",
    "href": "posts/Bikeshare Analyse/bikeshare.html",
    "title": "bikeshare prediction",
    "section": "",
    "text": "Im Folgenden sollen Fahrradausleihungen vorhergesagt werden. Gegenstand der Analysen ist ein Datensatz, der unter anderem Wetterdaten, Auskunft über das Datum und die Uhrzeit und die Anzahl der täglich geliehenen Fahrräder zu jeder Stunde enthält. Zunächst soll ein Überblick über den Datensatz und die Wechselwirkungen der Variablen untereinander verschafft werden. Im zweiten Teil werden Modelle mit einigen Vorverarbeitungsschritten trainiert, um dann im letzten Schritt die Vorhersagedatei zu erstellen. Als Framework für die Modellierung wird Tidymodels verwendet.\n\n\n\n\n\nlibrary(ggcorrplot)\n\nLoading required package: ggplot2\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(easystats)\n\n# Attaching packages: easystats 0.6.0 (red = needs update)\n✔ bayestestR  0.13.1   ✔ correlation 0.8.4 \n✖ datawizard  0.7.1    ✖ effectsize  0.8.3 \n✖ insight     0.19.2   ✔ modelbased  0.8.6 \n✖ performance 0.10.3   ✖ parameters  0.21.1\n✔ report      0.5.7    ✖ see         0.7.5 \n\nRestart the R-Session and update packages in red with `easystats::easystats_update()`.\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.2.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tibble       3.2.1\n✔ dplyr        1.1.2     ✔ tidyr        1.3.0\n✔ infer        1.0.4     ✔ tune         1.1.2\n✔ modeldata    1.2.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.8     \n\n\nWarning: package 'broom' was built under R version 4.2.3\n\n\nWarning: package 'dials' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'modeldata' was built under R version 4.2.3\n\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\n\nWarning: package 'recipes' was built under R version 4.2.3\n\n\nWarning: package 'rsample' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'tune' was built under R version 4.2.3\n\n\nWarning: package 'workflowsets' was built under R version 4.2.3\n\n\nWarning: package 'yardstick' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard()         masks scales::discard()\n✖ dplyr::filter()          masks stats::filter()\n✖ yardstick::get_weights() masks insight::get_weights()\n✖ dplyr::lag()             masks stats::lag()\n✖ yardstick::mae()         masks performance::mae()\n✖ parsnip::null_model()    masks insight::null_model()\n✖ infer::p_value()         masks parameters::p_value()\n✖ tune::parameters()       masks dials::parameters(), parameters::parameters()\n✖ yardstick::rmse()        masks performance::rmse()\n✖ dials::smoothness()      masks datawizard::smoothness()\n✖ recipes::step()          masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ readr   2.1.3     ✔ forcats 1.0.0\n✔ stringr 1.5.0     \n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\n\nlibrary(corrr)\nlibrary(tidytext)\n\nWarning: package 'tidytext' was built under R version 4.2.3\n\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(GGally)\n\nWarning: package 'GGally' was built under R version 4.2.3\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(xgboost)\n\nWarning: package 'xgboost' was built under R version 4.2.3\n\n\n\nAttaching package: 'xgboost'\n\nThe following object is masked from 'package:dplyr':\n\n    slice\n\nlibrary(Cubist)\n\nWarning: package 'Cubist' was built under R version 4.2.3\n\n\nLoading required package: lattice\n\nlibrary(rules)\n\nWarning: package 'rules' was built under R version 4.2.3\n\n\n\nAttaching package: 'rules'\n\nThe following object is masked from 'package:dials':\n\n    max_rules\n\nlibrary(caret)\n\nWarning: package 'caret' was built under R version 4.2.3\n\n\n\nAttaching package: 'caret'\n\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nThe following object is masked from 'package:parameters':\n\n    compare_models\n\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.2.3\n\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\n\n\n\n\n\nlibrary(readr)\nbikeshare_test &lt;- read_csv(\"bikeshare_test.csv\")\n\nRows: 2192 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): date, season, holiday, func\ndbl (9): hour, temp, humidity, windspeed, visibility, dewpointtemp, solar, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlibrary(readr)\nbikeshare_train &lt;- read_csv(\"bikeshare_train.csv\")\n\nRows: 6568 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): date, season, holiday, func\ndbl (10): count, hour, temp, humidity, windspeed, visibility, dewpointtemp, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nbikeshare_train\n\n# A tibble: 6,568 × 14\n   date       count  hour  temp humidity windspeed visibility dewpointtemp solar\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;dbl&gt;\n 1 01/12/2017   173     2  -6         39       1         2000        -17.7     0\n 2 01/12/2017   107     3  -6.2       40       0.9       2000        -17.6     0\n 3 01/12/2017    78     4  -6         36       2.3       2000        -18.6     0\n 4 01/12/2017   100     5  -6.4       37       1.5       2000        -18.7     0\n 5 01/12/2017   181     6  -6.6       35       1.3       2000        -19.5     0\n 6 02/12/2017   167     3  -3.5       81       2.2       1221         -6.2     0\n 7 02/12/2017    89     4  -3.8       79       2         1167         -6.9     0\n 8 02/12/2017    70     6  -4.3       82       2.1       1178         -6.9     0\n 9 02/12/2017   146     7  -4.4       81       2.5       1276         -7.1     0\n10 03/12/2017    32     5   3.9       75       1.9        914         -0.1     0\n# ℹ 6,558 more rows\n# ℹ 5 more variables: rain &lt;dbl&gt;, snow &lt;dbl&gt;, season &lt;chr&gt;, holiday &lt;chr&gt;,\n#   func &lt;chr&gt;\n\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  ggcorr(label = TRUE)\n\nWarning in ggcorr(., label = TRUE): data in column(s) 'date', 'season',\n'holiday', 'func' are not numeric and were ignored\n\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  summarise((across(everything(),~sum(is.na(.x)))))\n\n# A tibble: 1 × 14\n   date count  hour  temp humidity windspeed visibility dewpointtemp solar  rain\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;int&gt;      &lt;int&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0     0        0         0          0            0     0     0\n# ℹ 4 more variables: snow &lt;int&gt;, season &lt;int&gt;, holiday &lt;int&gt;, func &lt;int&gt;\n\n\n\nbikeshare_test %&gt;%\n  summarise((across(everything(),~sum(is.na(.x)))))\n\n# A tibble: 1 × 13\n   date  hour  temp humidity windspeed visibility dewpointtemp solar  rain  snow\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;int&gt;      &lt;int&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0        0         0          0            0     0     0     0\n# ℹ 3 more variables: season &lt;int&gt;, holiday &lt;int&gt;, func &lt;int&gt;\n\n\n\nvisdat::vis_dat(bikeshare_train)\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_boxplot(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n\n\n\n\nbikeshare_test %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_boxplot(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_histogram(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nbikeshare_test %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;%  \nggplot(., aes(x = value)) +\n  geom_histogram(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = season)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = holiday)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = func)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  ggplot(aes(x = season, fill = holiday)) +\n  geom_bar(alpha = 0.8) +\n  coord_flip() +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  ggplot(aes(x = season, fill = func)) +\n  geom_bar(alpha = 0.8) +\n  coord_flip() +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  mutate(hour = factor(hour)) %&gt;% \n  ggplot()+\n  aes(hour, count, fill = hour) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.8) +\n  scale_fill_viridis_d() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, count) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, temp) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, humidity) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, windspeed) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, visibility) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nEs gibt keine fehlenden Werte, Extremwerte sind auch äußerst rar. Durch die explorativen Datenanalyse ist deutlich zu erkennen, dass die Ausleihungen nach Jahres- und Uhrzeit stark variieren. Außerdem sind die Ausleihungen an Arbeitstagen höher. Bei nicht funktionalen Tagen finden keine Ausleihungen statt. Diese Beobachtung gilt es für die Vorhersagen im Hinterkopf zu behalten. Außerdem haben die Wettervariablen ihre Hoch- oder Tiefpunkte zu ungefähr derselben Uhrzeit, zu der auch am meisten Fahrräder geliehen werden.\n\n\n\n\n\n\n\nset.seed(42)\n\ntrain_test_split &lt;- initial_split(bikeshare_train, prop = 0.7497717)\nbikeshare_train1 &lt;- training(train_test_split)\nbikeshare_test1 &lt;- testing(train_test_split)\n\n\n\n\nDas Hauptaugenmerk bei den Rezepten liegt auf der Datumsspalte und den Interaktionen. Nach der Umwandlung in ein Datumsformat können mit step_date() einige interessante Features extrahiert werden. Außerdem gibt es einige interessante Interaktionseffekte. Die folgenden zwei Rezepte liefern die besten Vorhersagen und unterscheiden sich nur hinsichtlich der Normalisierung der Prädiktoren:\n\nrec72 &lt;- \n  recipe(count ~., data = bikeshare_train1) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_normalize(all_numeric_predictors(), -c(hour, date_doy, date_dow, date_week)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\") \n\n\nrec81 &lt;- \n  recipe(count ~., data = bikeshare_train1) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_dummy(all_nominal_predictors())%&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\")\n\n\n\n\n\nEs werden zwei starke Modelle berechnet, ein XGboost und ein Cubist. Die Wahl der Modellarten basiert hauptsächlich auf persönlichen Präferenzen. Es wird außerdem fünffache Kreuzvalidierung mit drei Wiederholungen verwendet.\n\ncv_scheme &lt;- vfold_cv(bikeshare_train1,\n  v = 5, \n  repeats = 3)\n\n\ndoParallel::registerDoParallel()\n\n\nmod_tree &lt;-\n  decision_tree(cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune(),\n                mode = \"regression\")\n\n\nmod_xg &lt;- boost_tree(\n  mtry = tune(), \n  trees = tune(), \n  tree_depth = tune(), \n  learn_rate = tune(), \n  min_n = tune(), \n  loss_reduction = tune()) %&gt;%\n  set_engine(\"xgboost\", nthreads = 4) %&gt;%\n  set_mode(\"regression\")\n\n\nmod_cubist &lt;- cubist_rules(\n  committees = tune(),\n  neighbors = tune(),\n  max_rules = tune()) %&gt;%\n  set_engine(\"Cubist\", nthreads = 4) %&gt;%\n  set_mode(\"regression\")\n\n\npreproc &lt;- list(rec81 = rec81, rec72 = rec72)\n\nmodels &lt;- list(cubist = mod_cubist, xgboost = mod_xg)\n\nall_workflows &lt;- workflow_set(preproc, models)\n\nmodel_set &lt;-\nall_workflows %&gt;% \nworkflow_map(\n  resamples = cv_scheme,\n  grid = 10,\n  seed = 42,\n  verbose = TRUE)\n\ni 1 of 4 tuning:     rec81_cubist\n\n\n✔ 1 of 4 tuning:     rec81_cubist (14m 36.8s)\n\n\ni 2 of 4 tuning:     rec81_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 2 of 4 tuning:     rec81_xgboost (29m 41s)\n\n\ni 3 of 4 tuning:     rec72_cubist\n\n\n✔ 3 of 4 tuning:     rec72_cubist (19m 50.1s)\n\n\ni 4 of 4 tuning:     rec72_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 4 of 4 tuning:     rec72_xgboost (10m 41.3s)\n\n\n\n\n\n\ntune::autoplot(model_set) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nmodel_set %&gt;% \n  collect_metrics() %&gt;% \n  arrange(-mean)\n\n# A tibble: 80 × 9\n   wflow_id      .config    preproc model .metric .estimator  mean     n std_err\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 rec81_xgboost Preproces… recipe  boos… rmse    standard    273.    15    2.42\n 2 rec81_xgboost Preproces… recipe  boos… rmse    standard    270.    15    2.74\n 3 rec81_xgboost Preproces… recipe  boos… rmse    standard    267.    15    3.25\n 4 rec72_xgboost Preproces… recipe  boos… rmse    standard    267.    15    2.56\n 5 rec72_xgboost Preproces… recipe  boos… rmse    standard    266.    15    2.68\n 6 rec81_xgboost Preproces… recipe  boos… rmse    standard    249.    15    3.37\n 7 rec72_xgboost Preproces… recipe  boos… rmse    standard    244.    15    2.87\n 8 rec72_xgboost Preproces… recipe  boos… rmse    standard    243.    15    3.22\n 9 rec72_cubist  Preproces… recipe  cubi… rmse    standard    200.    15    3.25\n10 rec81_cubist  Preproces… recipe  cubi… rmse    standard    188.    15    3.16\n# ℹ 70 more rows\n\n\n\nbest_model_params &lt;- \n  extract_workflow_set_result(model_set, \"rec81_cubist\") %&gt;% \n  select_best()\n\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n\nbest_wf &lt;- \nall_workflows %&gt;% \n  extract_workflow(\"rec81_cubist\")\n\nbest_wf_finalized &lt;- \n  best_wf %&gt;% \n  finalize_workflow(best_model_params)\n\nfit_final &lt;-\n  best_wf_finalized %&gt;% \n  last_fit(train_test_split)\n\ncollect_metrics(fit_final)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard     141.    Preprocessor1_Model1\n2 rsq     standard       0.954 Preprocessor1_Model1\n\n\n\nfit_final %&gt;% \n  extract_fit_parsnip() %&gt;% \n  vip() \n\n\n\n\n\n\n\n\nrecfinal &lt;- \n  recipe(count ~., data = bikeshare_train) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_dummy(all_nominal_predictors())%&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\")\n\n\ncv_scheme2 &lt;- vfold_cv(bikeshare_train,\n  v = 5, \n  repeats = 3)\n\n\npreproc2 &lt;- list(rec81 = recfinal)\n\nmodels2 &lt;- list(cubist = mod_cubist, xgboost = mod_xg)\n\nall_workflows2 &lt;- workflow_set(preproc2, models2)\n\nmodel_set2 &lt;-\nall_workflows2 %&gt;% \nworkflow_map(\n  resamples = cv_scheme2,\n  grid = 10,\n  seed = 42,\n  verbose = TRUE)\n\ni 1 of 2 tuning:     rec81_cubist\n\n\n✔ 1 of 2 tuning:     rec81_cubist (21m 49.8s)\n\n\ni 2 of 2 tuning:     rec81_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 2 of 2 tuning:     rec81_xgboost (11m 21.1s)\n\n\n\ntune::autoplot(model_set2) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nmodel_set2 %&gt;% \n  collect_metrics() %&gt;% \n  arrange(-mean)\n\n# A tibble: 40 × 9\n   wflow_id      .config    preproc model .metric .estimator  mean     n std_err\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 rec81_xgboost Preproces… recipe  boos… rmse    standard    274.    15    2.03\n 2 rec81_xgboost Preproces… recipe  boos… rmse    standard    272.    15    2.24\n 3 rec81_xgboost Preproces… recipe  boos… rmse    standard    260.    15    1.87\n 4 rec81_xgboost Preproces… recipe  boos… rmse    standard    242.    15    1.89\n 5 rec81_cubist  Preproces… recipe  cubi… rmse    standard    183.    15    2.65\n 6 rec81_cubist  Preproces… recipe  cubi… rmse    standard    169.    15    2.57\n 7 rec81_xgboost Preproces… recipe  boos… rmse    standard    160.    15    2.33\n 8 rec81_xgboost Preproces… recipe  boos… rmse    standard    159.    15    2.10\n 9 rec81_xgboost Preproces… recipe  boos… rmse    standard    159.    15    2.24\n10 rec81_xgboost Preproces… recipe  boos… rmse    standard    151.    15    2.48\n# ℹ 30 more rows\n\n\n\nbest_model_params2 &lt;- \n  extract_workflow_set_result(model_set2, \"rec81_cubist\") %&gt;% \n  select_best()\n\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n\nbest_wf2 &lt;- \nall_workflows2 %&gt;% \n  extract_workflow(\"rec81_cubist\")\n\nbest_wf_finalized2 &lt;- \n  best_wf2 %&gt;% \n  finalize_workflow(best_model_params2)\n\nfit_final2 &lt;-\n  best_wf_finalized2 %&gt;% \n  fit(bikeshare_train)\n\n\n\n\nBei der Vorhersage ist zu beachten, dass es im Train-Sample keine Ausleihungen an funktionalen Tagen gab. Es ist eine vernünftige Annahme, dass dies im Test-Sample wahrscheinlich genauso sein wird. Daher werden manuell alle Vorhersagen für nicht funktionale Tage auf null gesetzt.\n\nfinal_preds &lt;- \n  fit_final2 %&gt;% \n  predict(new_data = bikeshare_test) %&gt;% \n  bind_cols(bikeshare_test)\n\nsubmission_df &lt;-\n  final_preds %&gt;%\n  mutate(id = row_number()) %&gt;%\n  mutate(pred = case_when(func == \"No\" ~ 0,\n                            TRUE ~ .pred)) %&gt;% \n  select(id, pred)\n\n\nsubmission_df %&gt;% \n  ggplot() +\n  aes(pred) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nwrite.csv(submission_df, file = \"Balzer_Raphael_00163021_Prognose.csv\", row.names = FALSE)"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#vorbereitung",
    "href": "posts/Bikeshare Analyse/bikeshare.html#vorbereitung",
    "title": "bikeshare prediction",
    "section": "",
    "text": "library(ggcorrplot)\n\nLoading required package: ggplot2\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(easystats)\n\n# Attaching packages: easystats 0.6.0 (red = needs update)\n✔ bayestestR  0.13.1   ✔ correlation 0.8.4 \n✖ datawizard  0.7.1    ✖ effectsize  0.8.3 \n✖ insight     0.19.2   ✔ modelbased  0.8.6 \n✖ performance 0.10.3   ✖ parameters  0.21.1\n✔ report      0.5.7    ✖ see         0.7.5 \n\nRestart the R-Session and update packages in red with `easystats::easystats_update()`.\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.2.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tibble       3.2.1\n✔ dplyr        1.1.2     ✔ tidyr        1.3.0\n✔ infer        1.0.4     ✔ tune         1.1.2\n✔ modeldata    1.2.0     ✔ workflows    1.1.3\n✔ parsnip      1.1.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.1     ✔ yardstick    1.2.0\n✔ recipes      1.0.8     \n\n\nWarning: package 'broom' was built under R version 4.2.3\n\n\nWarning: package 'dials' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'modeldata' was built under R version 4.2.3\n\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\n\nWarning: package 'recipes' was built under R version 4.2.3\n\n\nWarning: package 'rsample' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'tune' was built under R version 4.2.3\n\n\nWarning: package 'workflowsets' was built under R version 4.2.3\n\n\nWarning: package 'yardstick' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard()         masks scales::discard()\n✖ dplyr::filter()          masks stats::filter()\n✖ yardstick::get_weights() masks insight::get_weights()\n✖ dplyr::lag()             masks stats::lag()\n✖ yardstick::mae()         masks performance::mae()\n✖ parsnip::null_model()    masks insight::null_model()\n✖ infer::p_value()         masks parameters::p_value()\n✖ tune::parameters()       masks dials::parameters(), parameters::parameters()\n✖ yardstick::rmse()        masks performance::rmse()\n✖ dials::smoothness()      masks datawizard::smoothness()\n✖ recipes::step()          masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ readr   2.1.3     ✔ forcats 1.0.0\n✔ stringr 1.5.0     \n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\n\nlibrary(corrr)\nlibrary(tidytext)\n\nWarning: package 'tidytext' was built under R version 4.2.3\n\nlibrary(ggthemes)\nlibrary(ggplot2)\nlibrary(GGally)\n\nWarning: package 'GGally' was built under R version 4.2.3\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(xgboost)\n\nWarning: package 'xgboost' was built under R version 4.2.3\n\n\n\nAttaching package: 'xgboost'\n\nThe following object is masked from 'package:dplyr':\n\n    slice\n\nlibrary(Cubist)\n\nWarning: package 'Cubist' was built under R version 4.2.3\n\n\nLoading required package: lattice\n\nlibrary(rules)\n\nWarning: package 'rules' was built under R version 4.2.3\n\n\n\nAttaching package: 'rules'\n\nThe following object is masked from 'package:dials':\n\n    max_rules\n\nlibrary(caret)\n\nWarning: package 'caret' was built under R version 4.2.3\n\n\n\nAttaching package: 'caret'\n\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nThe following object is masked from 'package:parameters':\n\n    compare_models\n\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.2.3\n\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\n\n\n\n\n\nlibrary(readr)\nbikeshare_test &lt;- read_csv(\"bikeshare_test.csv\")\n\nRows: 2192 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): date, season, holiday, func\ndbl (9): hour, temp, humidity, windspeed, visibility, dewpointtemp, solar, r...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlibrary(readr)\nbikeshare_train &lt;- read_csv(\"bikeshare_train.csv\")\n\nRows: 6568 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): date, season, holiday, func\ndbl (10): count, hour, temp, humidity, windspeed, visibility, dewpointtemp, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nbikeshare_train\n\n# A tibble: 6,568 × 14\n   date       count  hour  temp humidity windspeed visibility dewpointtemp solar\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;dbl&gt;\n 1 01/12/2017   173     2  -6         39       1         2000        -17.7     0\n 2 01/12/2017   107     3  -6.2       40       0.9       2000        -17.6     0\n 3 01/12/2017    78     4  -6         36       2.3       2000        -18.6     0\n 4 01/12/2017   100     5  -6.4       37       1.5       2000        -18.7     0\n 5 01/12/2017   181     6  -6.6       35       1.3       2000        -19.5     0\n 6 02/12/2017   167     3  -3.5       81       2.2       1221         -6.2     0\n 7 02/12/2017    89     4  -3.8       79       2         1167         -6.9     0\n 8 02/12/2017    70     6  -4.3       82       2.1       1178         -6.9     0\n 9 02/12/2017   146     7  -4.4       81       2.5       1276         -7.1     0\n10 03/12/2017    32     5   3.9       75       1.9        914         -0.1     0\n# ℹ 6,558 more rows\n# ℹ 5 more variables: rain &lt;dbl&gt;, snow &lt;dbl&gt;, season &lt;chr&gt;, holiday &lt;chr&gt;,\n#   func &lt;chr&gt;"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#explorative-datenanalyse",
    "href": "posts/Bikeshare Analyse/bikeshare.html#explorative-datenanalyse",
    "title": "bikeshare prediction",
    "section": "",
    "text": "bikeshare_train %&gt;% \n  ggcorr(label = TRUE)\n\nWarning in ggcorr(., label = TRUE): data in column(s) 'date', 'season',\n'holiday', 'func' are not numeric and were ignored\n\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  summarise((across(everything(),~sum(is.na(.x)))))\n\n# A tibble: 1 × 14\n   date count  hour  temp humidity windspeed visibility dewpointtemp solar  rain\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;int&gt;      &lt;int&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0     0        0         0          0            0     0     0\n# ℹ 4 more variables: snow &lt;int&gt;, season &lt;int&gt;, holiday &lt;int&gt;, func &lt;int&gt;\n\n\n\nbikeshare_test %&gt;%\n  summarise((across(everything(),~sum(is.na(.x)))))\n\n# A tibble: 1 × 13\n   date  hour  temp humidity windspeed visibility dewpointtemp solar  rain  snow\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;int&gt;      &lt;int&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     0     0     0        0         0          0            0     0     0     0\n# ℹ 3 more variables: season &lt;int&gt;, holiday &lt;int&gt;, func &lt;int&gt;\n\n\n\nvisdat::vis_dat(bikeshare_train)\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_boxplot(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n\n\n\n\nbikeshare_test %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_boxplot(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;% \nggplot(., aes(x = value)) +\n  geom_histogram(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nbikeshare_test %&gt;% \n  select(where(is.numeric)) %&gt;% \n  pivot_longer(everything()) %&gt;%  \nggplot(., aes(x = value)) +\n  geom_histogram(fill = \"#4E79A7\") +\n  theme_minimal() +\n  facet_wrap(~ name, scales = \"free_x\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = season)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = holiday)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%\n  pivot_longer(cols = 2:11) %&gt;%  \n  ggplot(., aes(x = value, fill = func)) +\n  geom_boxplot() +\n  facet_wrap(~ name, scales = \"free_x\") +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  ggplot(aes(x = season, fill = holiday)) +\n  geom_bar(alpha = 0.8) +\n  coord_flip() +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  ggplot(aes(x = season, fill = func)) +\n  geom_bar(alpha = 0.8) +\n  coord_flip() +\n  scale_fill_tableau() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;% \n  mutate(hour = factor(hour)) %&gt;% \n  ggplot()+\n  aes(hour, count, fill = hour) +\n  geom_boxplot(show.legend = FALSE, alpha = 0.8) +\n  scale_fill_viridis_d() +\n  theme_minimal()\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, count) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, temp) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, humidity) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, windspeed) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\nbikeshare_train %&gt;%  \n  ggplot()+\n  aes(hour, visibility) +\n  geom_smooth(color = \"#4E79A7\", linewidth = 2 ) +\n  theme_minimal()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nEs gibt keine fehlenden Werte, Extremwerte sind auch äußerst rar. Durch die explorativen Datenanalyse ist deutlich zu erkennen, dass die Ausleihungen nach Jahres- und Uhrzeit stark variieren. Außerdem sind die Ausleihungen an Arbeitstagen höher. Bei nicht funktionalen Tagen finden keine Ausleihungen statt. Diese Beobachtung gilt es für die Vorhersagen im Hinterkopf zu behalten. Außerdem haben die Wettervariablen ihre Hoch- oder Tiefpunkte zu ungefähr derselben Uhrzeit, zu der auch am meisten Fahrräder geliehen werden."
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#modellierung",
    "href": "posts/Bikeshare Analyse/bikeshare.html#modellierung",
    "title": "bikeshare prediction",
    "section": "",
    "text": "set.seed(42)\n\ntrain_test_split &lt;- initial_split(bikeshare_train, prop = 0.7497717)\nbikeshare_train1 &lt;- training(train_test_split)\nbikeshare_test1 &lt;- testing(train_test_split)\n\n\n\n\nDas Hauptaugenmerk bei den Rezepten liegt auf der Datumsspalte und den Interaktionen. Nach der Umwandlung in ein Datumsformat können mit step_date() einige interessante Features extrahiert werden. Außerdem gibt es einige interessante Interaktionseffekte. Die folgenden zwei Rezepte liefern die besten Vorhersagen und unterscheiden sich nur hinsichtlich der Normalisierung der Prädiktoren:\n\nrec72 &lt;- \n  recipe(count ~., data = bikeshare_train1) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_normalize(all_numeric_predictors(), -c(hour, date_doy, date_dow, date_week)) %&gt;%\n  step_dummy(all_nominal_predictors()) %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\") \n\n\nrec81 &lt;- \n  recipe(count ~., data = bikeshare_train1) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_dummy(all_nominal_predictors())%&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\")"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#modelle",
    "href": "posts/Bikeshare Analyse/bikeshare.html#modelle",
    "title": "bikeshare prediction",
    "section": "",
    "text": "Es werden zwei starke Modelle berechnet, ein XGboost und ein Cubist. Die Wahl der Modellarten basiert hauptsächlich auf persönlichen Präferenzen. Es wird außerdem fünffache Kreuzvalidierung mit drei Wiederholungen verwendet.\n\ncv_scheme &lt;- vfold_cv(bikeshare_train1,\n  v = 5, \n  repeats = 3)\n\n\ndoParallel::registerDoParallel()\n\n\nmod_tree &lt;-\n  decision_tree(cost_complexity = tune(),\n                tree_depth = tune(),\n                min_n = tune(),\n                mode = \"regression\")\n\n\nmod_xg &lt;- boost_tree(\n  mtry = tune(), \n  trees = tune(), \n  tree_depth = tune(), \n  learn_rate = tune(), \n  min_n = tune(), \n  loss_reduction = tune()) %&gt;%\n  set_engine(\"xgboost\", nthreads = 4) %&gt;%\n  set_mode(\"regression\")\n\n\nmod_cubist &lt;- cubist_rules(\n  committees = tune(),\n  neighbors = tune(),\n  max_rules = tune()) %&gt;%\n  set_engine(\"Cubist\", nthreads = 4) %&gt;%\n  set_mode(\"regression\")\n\n\npreproc &lt;- list(rec81 = rec81, rec72 = rec72)\n\nmodels &lt;- list(cubist = mod_cubist, xgboost = mod_xg)\n\nall_workflows &lt;- workflow_set(preproc, models)\n\nmodel_set &lt;-\nall_workflows %&gt;% \nworkflow_map(\n  resamples = cv_scheme,\n  grid = 10,\n  seed = 42,\n  verbose = TRUE)\n\ni 1 of 4 tuning:     rec81_cubist\n\n\n✔ 1 of 4 tuning:     rec81_cubist (14m 36.8s)\n\n\ni 2 of 4 tuning:     rec81_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 2 of 4 tuning:     rec81_xgboost (29m 41s)\n\n\ni 3 of 4 tuning:     rec72_cubist\n\n\n✔ 3 of 4 tuning:     rec72_cubist (19m 50.1s)\n\n\ni 4 of 4 tuning:     rec72_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 4 of 4 tuning:     rec72_xgboost (10m 41.3s)"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#ergebnisse",
    "href": "posts/Bikeshare Analyse/bikeshare.html#ergebnisse",
    "title": "bikeshare prediction",
    "section": "",
    "text": "tune::autoplot(model_set) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nmodel_set %&gt;% \n  collect_metrics() %&gt;% \n  arrange(-mean)\n\n# A tibble: 80 × 9\n   wflow_id      .config    preproc model .metric .estimator  mean     n std_err\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 rec81_xgboost Preproces… recipe  boos… rmse    standard    273.    15    2.42\n 2 rec81_xgboost Preproces… recipe  boos… rmse    standard    270.    15    2.74\n 3 rec81_xgboost Preproces… recipe  boos… rmse    standard    267.    15    3.25\n 4 rec72_xgboost Preproces… recipe  boos… rmse    standard    267.    15    2.56\n 5 rec72_xgboost Preproces… recipe  boos… rmse    standard    266.    15    2.68\n 6 rec81_xgboost Preproces… recipe  boos… rmse    standard    249.    15    3.37\n 7 rec72_xgboost Preproces… recipe  boos… rmse    standard    244.    15    2.87\n 8 rec72_xgboost Preproces… recipe  boos… rmse    standard    243.    15    3.22\n 9 rec72_cubist  Preproces… recipe  cubi… rmse    standard    200.    15    3.25\n10 rec81_cubist  Preproces… recipe  cubi… rmse    standard    188.    15    3.16\n# ℹ 70 more rows\n\n\n\nbest_model_params &lt;- \n  extract_workflow_set_result(model_set, \"rec81_cubist\") %&gt;% \n  select_best()\n\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n\nbest_wf &lt;- \nall_workflows %&gt;% \n  extract_workflow(\"rec81_cubist\")\n\nbest_wf_finalized &lt;- \n  best_wf %&gt;% \n  finalize_workflow(best_model_params)\n\nfit_final &lt;-\n  best_wf_finalized %&gt;% \n  last_fit(train_test_split)\n\ncollect_metrics(fit_final)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard     141.    Preprocessor1_Model1\n2 rsq     standard       0.954 Preprocessor1_Model1\n\n\n\nfit_final %&gt;% \n  extract_fit_parsnip() %&gt;% \n  vip()"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#trainieren-und-fitten-des-modells-auf-den-ursprünglichen-trainingsdaten",
    "href": "posts/Bikeshare Analyse/bikeshare.html#trainieren-und-fitten-des-modells-auf-den-ursprünglichen-trainingsdaten",
    "title": "bikeshare prediction",
    "section": "",
    "text": "recfinal &lt;- \n  recipe(count ~., data = bikeshare_train) %&gt;%\n  step_mutate(date = lubridate::dmy(date)) %&gt;%\n  step_date(date,  features = c(\"dow\", \"doy\", \"week\"), keep_original_cols = FALSE) %&gt;%\n  step_mutate(date_dow = as.numeric(date_dow),\n              date_week = as.numeric(date_week)) %&gt;%\n  step_dummy(all_nominal_predictors())%&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):hour, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"holiday\"):humidity, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):rain, role = \"predictor\") %&gt;%\n  step_interact(terms = ~starts_with(\"holiday\"):date_dow, role = \"predictor\") %&gt;% \n  step_interact(terms = ~starts_with(\"func\"):temp, role = \"predictor\")\n\n\ncv_scheme2 &lt;- vfold_cv(bikeshare_train,\n  v = 5, \n  repeats = 3)\n\n\npreproc2 &lt;- list(rec81 = recfinal)\n\nmodels2 &lt;- list(cubist = mod_cubist, xgboost = mod_xg)\n\nall_workflows2 &lt;- workflow_set(preproc2, models2)\n\nmodel_set2 &lt;-\nall_workflows2 %&gt;% \nworkflow_map(\n  resamples = cv_scheme2,\n  grid = 10,\n  seed = 42,\n  verbose = TRUE)\n\ni 1 of 2 tuning:     rec81_cubist\n\n\n✔ 1 of 2 tuning:     rec81_cubist (21m 49.8s)\n\n\ni 2 of 2 tuning:     rec81_xgboost\n\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\n✔ 2 of 2 tuning:     rec81_xgboost (11m 21.1s)\n\n\n\ntune::autoplot(model_set2) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nmodel_set2 %&gt;% \n  collect_metrics() %&gt;% \n  arrange(-mean)\n\n# A tibble: 40 × 9\n   wflow_id      .config    preproc model .metric .estimator  mean     n std_err\n   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 rec81_xgboost Preproces… recipe  boos… rmse    standard    274.    15    2.03\n 2 rec81_xgboost Preproces… recipe  boos… rmse    standard    272.    15    2.24\n 3 rec81_xgboost Preproces… recipe  boos… rmse    standard    260.    15    1.87\n 4 rec81_xgboost Preproces… recipe  boos… rmse    standard    242.    15    1.89\n 5 rec81_cubist  Preproces… recipe  cubi… rmse    standard    183.    15    2.65\n 6 rec81_cubist  Preproces… recipe  cubi… rmse    standard    169.    15    2.57\n 7 rec81_xgboost Preproces… recipe  boos… rmse    standard    160.    15    2.33\n 8 rec81_xgboost Preproces… recipe  boos… rmse    standard    159.    15    2.10\n 9 rec81_xgboost Preproces… recipe  boos… rmse    standard    159.    15    2.24\n10 rec81_xgboost Preproces… recipe  boos… rmse    standard    151.    15    2.48\n# ℹ 30 more rows\n\n\n\nbest_model_params2 &lt;- \n  extract_workflow_set_result(model_set2, \"rec81_cubist\") %&gt;% \n  select_best()\n\nWarning: No value of `metric` was given; metric 'rmse' will be used.\n\nbest_wf2 &lt;- \nall_workflows2 %&gt;% \n  extract_workflow(\"rec81_cubist\")\n\nbest_wf_finalized2 &lt;- \n  best_wf2 %&gt;% \n  finalize_workflow(best_model_params2)\n\nfit_final2 &lt;-\n  best_wf_finalized2 %&gt;% \n  fit(bikeshare_train)"
  },
  {
    "objectID": "posts/Bikeshare Analyse/bikeshare.html#vorhersage-auf-das-test-sample",
    "href": "posts/Bikeshare Analyse/bikeshare.html#vorhersage-auf-das-test-sample",
    "title": "bikeshare prediction",
    "section": "",
    "text": "Bei der Vorhersage ist zu beachten, dass es im Train-Sample keine Ausleihungen an funktionalen Tagen gab. Es ist eine vernünftige Annahme, dass dies im Test-Sample wahrscheinlich genauso sein wird. Daher werden manuell alle Vorhersagen für nicht funktionale Tage auf null gesetzt.\n\nfinal_preds &lt;- \n  fit_final2 %&gt;% \n  predict(new_data = bikeshare_test) %&gt;% \n  bind_cols(bikeshare_test)\n\nsubmission_df &lt;-\n  final_preds %&gt;%\n  mutate(id = row_number()) %&gt;%\n  mutate(pred = case_when(func == \"No\" ~ 0,\n                            TRUE ~ .pred)) %&gt;% \n  select(id, pred)\n\n\nsubmission_df %&gt;% \n  ggplot() +\n  aes(pred) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nwrite.csv(submission_df, file = \"Balzer_Raphael_00163021_Prognose.csv\", row.names = FALSE)"
  },
  {
    "objectID": "posts/Goldener-Topf_Analyse/goto.html",
    "href": "posts/Goldener-Topf_Analyse/goto.html",
    "title": "Miniprojekt DS",
    "section": "",
    "text": "library(tokenizers)\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(ggthemes)\nlibrary(topicmodels)\nlibrary(tm)\n\n\n\nTextanalyse von E.T.A-Hoffmanns “Der goldene Topf”.\n\ntopf &lt;- read.delim2(\"https://www.gutenberg.org/cache/epub/17362/pg17362.txt\")\ntopf &lt;- as_tibble(topf)\ntopf &lt;- topf[-c(1:24, 2678:2979), ]\ntopf\n\n# A tibble: 2,653 × 1\n   The.Project.Gutenberg.eBook.of.Der.Goldene.Topf                  \n   &lt;chr&gt;                                                            \n 1 DER GOLDENE TOPF                                                 \n 2 von                                                              \n 3 E.T.A. HOFFMANN:                                                 \n 4 Mit 11 Federzeichnungen von Edmund Schaefer                      \n 5 [Illustration: Titelbild. Die Frauenkirche in Dresden]           \n 6 Erstes bis fünftes Tausend                                       \n 7 Verlag von Gustav Kiepenheuer Weimar 1913                        \n 8 ERSTE VIGILIE.                                                   \n 9 Die Unglücksfälle des Studenten Anselmus. Des Konrektors Paulmann\n10 Sanitätsknaster und die goldgrünen Schlangen.                    \n# ℹ 2,643 more rows\n\n\n\n\n\ntopf_token &lt;- topf %&gt;% \n  unnest_tokens(output = token, input = The.Project.Gutenberg.eBook.of.Der.Goldene.Topf) %&gt;% \n  filter(str_detect(token, \"[a-z]\"))\ntopf_token\n\n# A tibble: 29,219 × 1\n   token           \n   &lt;chr&gt;           \n 1 der             \n 2 goldene         \n 3 topf            \n 4 von             \n 5 e.t.a           \n 6 hoffmann        \n 7 mit             \n 8 federzeichnungen\n 9 von             \n10 edmund          \n# ℹ 29,209 more rows\n\n\n\n\n\n\ndata(stopwords_de, package = \"lsa\")\n\nstopwords_de &lt;- tibble(word = stopwords_de)\n\nstopwords_de &lt;- stopwords_de %&gt;% \n  rename(token = word)  \n\ntopf_token &lt;- topf_token %&gt;% \n  anti_join(stopwords_de)\n\nJoining with `by = join_by(token)`\n\ntopf_token %&gt;% \n  count(token, sort = TRUE) %&gt;% \n  print()\n\n# A tibble: 5,508 × 2\n   token           n\n   &lt;chr&gt;       &lt;int&gt;\n 1 er            446\n 2 anselmus      291\n 3 archivarius   160\n 4 denn          151\n 5 du            144\n 6 nun           137\n 7 ihn           118\n 8 veronika      105\n 9 student        97\n10 wohl           94\n# ℹ 5,498 more rows\n\n\n\n\n\n\n\ndata(sentiws, package = \"pradadata\")\ntopf_senti &lt;- topf_token %&gt;% \n  inner_join(sentiws, by = c(\"token\" = \"word\")) %&gt;% \n  select(-inflections)\n\nWarning in inner_join(., sentiws, by = c(token = \"word\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2698 of `x` matches multiple rows in `y`.\nℹ Row 3187 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\ntopf_senti\n\n# A tibble: 600 × 3\n   token     neg_pos   value\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 glücklich pos      0.115 \n 2 besonders pos      0.539 \n 3 schnell   pos      0.117 \n 4 lachen    pos      0.0135\n 5 entziehen neg     -0.0048\n 6 weise     pos      0.224 \n 7 festlich  pos      0.202 \n 8 kurz      neg     -0.0048\n 9 langsam   neg     -0.0167\n10 einsam    neg     -0.163 \n# ℹ 590 more rows\n\n\n\ntopf_senti %&gt;%\n  count(token, neg_pos, sort = TRUE) %&gt;%\n  ungroup() %&gt;%\n  group_by(neg_pos) %&gt;%\n  slice_max(n, n = 10)%&gt;%\n  ungroup() %&gt;%\n  mutate(token = reorder(token, n)) %&gt;%\n  ggplot(aes(n, token, fill = neg_pos)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~neg_pos, scales = \"free_y\") +\n  labs(x = \"Häufigkeit\",\n       y = \"Wort\") +\n  theme_minimal() +\n  scale_fill_tableau(palette = \"Nuriel Stone\")\n\n\n\n\n\ntopf_senti %&gt;% \n  group_by(neg_pos) %&gt;% \n  summarise(polarity_sum = sum(value),\n            polarity_count = n()) %&gt;% \n  mutate(polarity_prop = (polarity_count / sum(polarity_count)) %&gt;% \n           round(2))\n\n# A tibble: 2 × 4\n  neg_pos polarity_sum polarity_count polarity_prop\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;int&gt;         &lt;dbl&gt;\n1 neg            -29.5            184          0.31\n2 pos             72.3            416          0.69\n\n\n\ntopf_senti %&gt;% \n  distinct(token, .keep_all = TRUE) %&gt;% \n  mutate(value_abs = abs(value)) %&gt;%\n  group_by(neg_pos) %&gt;%\n  top_n(10, value_abs) %&gt;%\n  mutate(token = reorder(token, value_abs)) %&gt;%\n  ggplot(aes(value_abs, token, fill = neg_pos)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~neg_pos, scales = \"free_y\") +\n  labs(x = \"Effektstärke\",\n       y = \"Wort\") +\n  theme_minimal() +\n  scale_fill_tableau(palette = \"Nuriel Stone\")\n\n\n\n\n\n\n\nHäufigkeiten der Bigramme\n\ntopf_bigram &lt;- \n  topf %&gt;%\n  unnest_tokens(bigram, The.Project.Gutenberg.eBook.of.Der.Goldene.Topf, token = \"ngrams\", n = 2) %&gt;%\n  filter(!is.na(bigram))\n\n\ntopf_bigram %&gt;% \ncount(bigram, sort = TRUE) %&gt;% \n  print()\n\n# A tibble: 19,046 × 2\n   bigram                    n\n   &lt;chr&gt;                 &lt;int&gt;\n 1 in der                   89\n 2 der student              85\n 3 student anselmus         77\n 4 archivarius lindhorst    72\n 5 der archivarius          67\n 6 in den                   49\n 7 in die                   49\n 8 der konrektor            46\n 9 in dem                   46\n10 konrektor paulmann       46\n# ℹ 19,036 more rows\n\n\n\n\n\ntopf_bigra_sep &lt;- topf_bigram %&gt;%\n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \")%&gt;%\n  filter(!word1 %in% stop_words$word) %&gt;%\n  filter(!word2 %in% stop_words$word)\n\ntopf_bigra_sep %&gt;%\n  unite(bigram, word1, word2, sep = \" \") %&gt;%\n  count(bigram, sort = TRUE) %&gt;%\n  slice_max(n, n = 10)%&gt;%\n  mutate(bigram = reorder(bigram, n)) %&gt;%\n  ggplot(aes(n, bigram)) +\n  geom_col(fill = \"#8175aa\") +\n  labs(x = \"Häufigkeit\",\n       y = \"Bigram\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nVerneinungen &lt;- c(\"nicht\", \"nie\", \"niemals\", \"keine\", \"kein\")\n\ntopf_bigra_sep %&gt;%\n  filter(word1 %in% Verneinungen) %&gt;%\n  inner_join(sentiws, by = c(word2 = \"word\")) %&gt;%\n  count(word1, word2, value, sort = TRUE) %&gt;% \n  mutate(Beitrag = n * value) %&gt;%\n  arrange(desc(abs(Beitrag))) %&gt;%\n  head(20) %&gt;%\n  mutate(word2 = reorder(word2, Beitrag)) %&gt;%\n  ggplot(aes(n * value, word2, fill = n * value &gt; 0)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Sentiment-Wert * Häufigkeit\",\n       y = \"Verneinungen\") +\n  theme_minimal()+\n  scale_fill_tableau(\"Nuriel Stone\")\n\n\n\n\n\n\n\n\n\ntopf_dtm &lt;- DocumentTermMatrix(topf_token)\ntopf_lda &lt;- LDA(topf_dtm, k = 4, control = list(seed = 42))\n\n\ntopf_themen &lt;- tidy(topf_lda, matrix = \"beta\")\n\ntopf_themen &lt;- topf_themen %&gt;%\n  group_by(topic) %&gt;%\n  slice_max(beta, n = 10) %&gt;% \n  ungroup() %&gt;%\n  arrange(topic, -beta)\n\ntopf_themen %&gt;%\n  mutate(term = reorder_within(term, beta, topic)) %&gt;%\n  ggplot(aes(beta, term, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  scale_y_reordered() +\n  theme_minimal() +\n  scale_fill_tableau(\"Nuriel Stone\")"
  },
  {
    "objectID": "posts/Goldener-Topf_Analyse/goto.html#datenimport",
    "href": "posts/Goldener-Topf_Analyse/goto.html#datenimport",
    "title": "Miniprojekt DS",
    "section": "",
    "text": "Textanalyse von E.T.A-Hoffmanns “Der goldene Topf”.\n\ntopf &lt;- read.delim2(\"https://www.gutenberg.org/cache/epub/17362/pg17362.txt\")\ntopf &lt;- as_tibble(topf)\ntopf &lt;- topf[-c(1:24, 2678:2979), ]\ntopf\n\n# A tibble: 2,653 × 1\n   The.Project.Gutenberg.eBook.of.Der.Goldene.Topf                  \n   &lt;chr&gt;                                                            \n 1 DER GOLDENE TOPF                                                 \n 2 von                                                              \n 3 E.T.A. HOFFMANN:                                                 \n 4 Mit 11 Federzeichnungen von Edmund Schaefer                      \n 5 [Illustration: Titelbild. Die Frauenkirche in Dresden]           \n 6 Erstes bis fünftes Tausend                                       \n 7 Verlag von Gustav Kiepenheuer Weimar 1913                        \n 8 ERSTE VIGILIE.                                                   \n 9 Die Unglücksfälle des Studenten Anselmus. Des Konrektors Paulmann\n10 Sanitätsknaster und die goldgrünen Schlangen.                    \n# ℹ 2,643 more rows\n\n\n\n\n\ntopf_token &lt;- topf %&gt;% \n  unnest_tokens(output = token, input = The.Project.Gutenberg.eBook.of.Der.Goldene.Topf) %&gt;% \n  filter(str_detect(token, \"[a-z]\"))\ntopf_token\n\n# A tibble: 29,219 × 1\n   token           \n   &lt;chr&gt;           \n 1 der             \n 2 goldene         \n 3 topf            \n 4 von             \n 5 e.t.a           \n 6 hoffmann        \n 7 mit             \n 8 federzeichnungen\n 9 von             \n10 edmund          \n# ℹ 29,209 more rows\n\n\n\n\n\n\ndata(stopwords_de, package = \"lsa\")\n\nstopwords_de &lt;- tibble(word = stopwords_de)\n\nstopwords_de &lt;- stopwords_de %&gt;% \n  rename(token = word)  \n\ntopf_token &lt;- topf_token %&gt;% \n  anti_join(stopwords_de)\n\nJoining with `by = join_by(token)`\n\ntopf_token %&gt;% \n  count(token, sort = TRUE) %&gt;% \n  print()\n\n# A tibble: 5,508 × 2\n   token           n\n   &lt;chr&gt;       &lt;int&gt;\n 1 er            446\n 2 anselmus      291\n 3 archivarius   160\n 4 denn          151\n 5 du            144\n 6 nun           137\n 7 ihn           118\n 8 veronika      105\n 9 student        97\n10 wohl           94\n# ℹ 5,498 more rows"
  },
  {
    "objectID": "posts/Goldener-Topf_Analyse/goto.html#sentimentanalyse",
    "href": "posts/Goldener-Topf_Analyse/goto.html#sentimentanalyse",
    "title": "Miniprojekt DS",
    "section": "",
    "text": "data(sentiws, package = \"pradadata\")\ntopf_senti &lt;- topf_token %&gt;% \n  inner_join(sentiws, by = c(\"token\" = \"word\")) %&gt;% \n  select(-inflections)\n\nWarning in inner_join(., sentiws, by = c(token = \"word\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2698 of `x` matches multiple rows in `y`.\nℹ Row 3187 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\ntopf_senti\n\n# A tibble: 600 × 3\n   token     neg_pos   value\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 glücklich pos      0.115 \n 2 besonders pos      0.539 \n 3 schnell   pos      0.117 \n 4 lachen    pos      0.0135\n 5 entziehen neg     -0.0048\n 6 weise     pos      0.224 \n 7 festlich  pos      0.202 \n 8 kurz      neg     -0.0048\n 9 langsam   neg     -0.0167\n10 einsam    neg     -0.163 \n# ℹ 590 more rows\n\n\n\ntopf_senti %&gt;%\n  count(token, neg_pos, sort = TRUE) %&gt;%\n  ungroup() %&gt;%\n  group_by(neg_pos) %&gt;%\n  slice_max(n, n = 10)%&gt;%\n  ungroup() %&gt;%\n  mutate(token = reorder(token, n)) %&gt;%\n  ggplot(aes(n, token, fill = neg_pos)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~neg_pos, scales = \"free_y\") +\n  labs(x = \"Häufigkeit\",\n       y = \"Wort\") +\n  theme_minimal() +\n  scale_fill_tableau(palette = \"Nuriel Stone\")\n\n\n\n\n\ntopf_senti %&gt;% \n  group_by(neg_pos) %&gt;% \n  summarise(polarity_sum = sum(value),\n            polarity_count = n()) %&gt;% \n  mutate(polarity_prop = (polarity_count / sum(polarity_count)) %&gt;% \n           round(2))\n\n# A tibble: 2 × 4\n  neg_pos polarity_sum polarity_count polarity_prop\n  &lt;chr&gt;          &lt;dbl&gt;          &lt;int&gt;         &lt;dbl&gt;\n1 neg            -29.5            184          0.31\n2 pos             72.3            416          0.69\n\n\n\ntopf_senti %&gt;% \n  distinct(token, .keep_all = TRUE) %&gt;% \n  mutate(value_abs = abs(value)) %&gt;%\n  group_by(neg_pos) %&gt;%\n  top_n(10, value_abs) %&gt;%\n  mutate(token = reorder(token, value_abs)) %&gt;%\n  ggplot(aes(value_abs, token, fill = neg_pos)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~neg_pos, scales = \"free_y\") +\n  labs(x = \"Effektstärke\",\n       y = \"Wort\") +\n  theme_minimal() +\n  scale_fill_tableau(palette = \"Nuriel Stone\")"
  },
  {
    "objectID": "posts/Goldener-Topf_Analyse/goto.html#n-gram---analyse",
    "href": "posts/Goldener-Topf_Analyse/goto.html#n-gram---analyse",
    "title": "Miniprojekt DS",
    "section": "",
    "text": "Häufigkeiten der Bigramme\n\ntopf_bigram &lt;- \n  topf %&gt;%\n  unnest_tokens(bigram, The.Project.Gutenberg.eBook.of.Der.Goldene.Topf, token = \"ngrams\", n = 2) %&gt;%\n  filter(!is.na(bigram))\n\n\ntopf_bigram %&gt;% \ncount(bigram, sort = TRUE) %&gt;% \n  print()\n\n# A tibble: 19,046 × 2\n   bigram                    n\n   &lt;chr&gt;                 &lt;int&gt;\n 1 in der                   89\n 2 der student              85\n 3 student anselmus         77\n 4 archivarius lindhorst    72\n 5 der archivarius          67\n 6 in den                   49\n 7 in die                   49\n 8 der konrektor            46\n 9 in dem                   46\n10 konrektor paulmann       46\n# ℹ 19,036 more rows\n\n\n\n\n\ntopf_bigra_sep &lt;- topf_bigram %&gt;%\n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \")%&gt;%\n  filter(!word1 %in% stop_words$word) %&gt;%\n  filter(!word2 %in% stop_words$word)\n\ntopf_bigra_sep %&gt;%\n  unite(bigram, word1, word2, sep = \" \") %&gt;%\n  count(bigram, sort = TRUE) %&gt;%\n  slice_max(n, n = 10)%&gt;%\n  mutate(bigram = reorder(bigram, n)) %&gt;%\n  ggplot(aes(n, bigram)) +\n  geom_col(fill = \"#8175aa\") +\n  labs(x = \"Häufigkeit\",\n       y = \"Bigram\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nVerneinungen &lt;- c(\"nicht\", \"nie\", \"niemals\", \"keine\", \"kein\")\n\ntopf_bigra_sep %&gt;%\n  filter(word1 %in% Verneinungen) %&gt;%\n  inner_join(sentiws, by = c(word2 = \"word\")) %&gt;%\n  count(word1, word2, value, sort = TRUE) %&gt;% \n  mutate(Beitrag = n * value) %&gt;%\n  arrange(desc(abs(Beitrag))) %&gt;%\n  head(20) %&gt;%\n  mutate(word2 = reorder(word2, Beitrag)) %&gt;%\n  ggplot(aes(n * value, word2, fill = n * value &gt; 0)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Sentiment-Wert * Häufigkeit\",\n       y = \"Verneinungen\") +\n  theme_minimal()+\n  scale_fill_tableau(\"Nuriel Stone\")"
  },
  {
    "objectID": "posts/Goldener-Topf_Analyse/goto.html#themenanalyse",
    "href": "posts/Goldener-Topf_Analyse/goto.html#themenanalyse",
    "title": "Miniprojekt DS",
    "section": "",
    "text": "topf_dtm &lt;- DocumentTermMatrix(topf_token)\ntopf_lda &lt;- LDA(topf_dtm, k = 4, control = list(seed = 42))\n\n\ntopf_themen &lt;- tidy(topf_lda, matrix = \"beta\")\n\ntopf_themen &lt;- topf_themen %&gt;%\n  group_by(topic) %&gt;%\n  slice_max(beta, n = 10) %&gt;% \n  ungroup() %&gt;%\n  arrange(topic, -beta)\n\ntopf_themen %&gt;%\n  mutate(term = reorder_within(term, beta, topic)) %&gt;%\n  ggplot(aes(beta, term, fill = factor(topic))) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~ topic, scales = \"free\") +\n  scale_y_reordered() +\n  theme_minimal() +\n  scale_fill_tableau(\"Nuriel Stone\")"
  }
]